# This is the main configuration file for the application.

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="4_m<`J`9G;xn<iFEte_85ksEXBkKOtNTXmUh]9dh5CJ[Fh>UE3UyfmwN?TsR^tCv"

# The application languages
# ~~~~~
application.langs=${democracit_lang}

application.ui.menu.displaycms= false
application.ui.menu.baseurl="http://localhost:9000"


# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver=org.postgresql.Driver
db.default.url=${democracit_db_con_string}
db.default.user=${democracit_db_user}
db.default.password=${democracit_db_pw}
db.default.pool = "bonecp"
db.default.bonecp.logStatements=true

# email settings
 mail.smtp.host=${SMTP_HOST}
 mail.smtp.port=${SMTP_PORT}
 mail.smtp.user=${SMTP_USERNAME}
 mail.smtp.pass=${SMTP_PASS}


 # The mailer plugin config
 # ~~~~~
  play.mailer {
    host=${SMTP_HOST}
    port=${SMTP_PORT}
    ssl=false
    tls=true
    user=${SMTP_USERNAME}
    password=${SMTP_PASS}
    #debug (defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger)
    #timeout (defaults to 60s)
    #connectiontimeout (defaults to 60s)
    #mock=true #(defaults to no, will only log all the email properties instead of sending an email)
    from="noreply@democracit.org"
  }


# Registers the error handler
# ~~~~~
play.http.errorHandler = "utils.ErrorHandler"

# Registers the filters
# ~~~~~
 play.http.filters = "utils.Filters"

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "modules.DemocracitModule"


# Security Filter Configuration - Content Security Policy
# ~~~~~
#play.filters.headers.contentSecurityPolicy
# default-src
# 'self'
# img-src
# 'self'
# fbcdn-profile-a.akamaihd.net (Facebook)
# *.twimg.com (Twitter)
# *.googleusercontent.com (Google)
# *.xingassets.com (Xing)
# vk.com (VK)
# *.yimg.com (Yahoo)
# secure.gravatar.com
# style-src
# 'self'
# 'unsafe-inline'
# cdnjs.cloudflare.com
# maxcdn.bootstrapcdn.com
# cdn.jsdelivr.net
# fonts.googleapis.com
# 'unsafe-inline' (in-line css found in bootstrap.min.js)
# font-src
# 'self'
# fonts.gstatic.com
# fonts.googleapis.com
# cdnjs.cloudflare.com
# script-src
# 'self'
# clef.io
# connect-src
# 'self'
# twitter.com
# *.xing.com
# frame-src
# clef.io

# // we have disabled securityHeadersFilter on the utils.Filters file
# play.filters.headers.contentSecurityPolicy="fonts.googleapis.com; default-src 'self'; img-src 'self' fbcdn-profile-a.akamaihd.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com; style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com; font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com; script-src 'self' clef.io; connect-src 'self' twitter.com *.xing.com; frame-src clef.io"



# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

application.state="development"

# solr url for search
application.solrBaseUrl="http://localhost:28983/solr/"

# word cloud base url
application.wordCloudBaseUrl="http://localhost:28084/WordCloud/WordCloud"

#a web service that you can post a string (parameter "text" on the post request) and returns terms/aspects found on that string
application.webservice.termsExtraction="http://127.0.0.1:5001/aspect_extractor/extract_aspects"

include "silhouette.conf"
