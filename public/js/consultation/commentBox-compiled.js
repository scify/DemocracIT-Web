"use strict";

(function () {

    scify.CommentBox = React.createClass({
        displayName: "CommentBox",

        getInitialState: function getInitialState() {
            return { comments: [], //the comments that will be displayed (either all comments or top comments)
                allComments: [], //in case we display a subset of comments, this array contains all the comments
                topComments: [], //contains the top comments, the one with the most likes
                discussionThreadId: this.props.discussionthreadid,
                totalCommentsCount: this.props.commentsCount,
                messages: this.props.messages
            };
        },
        findTopComments: function findTopComments(comments) {

            if (comments.length < 9) return comments; //dont filter;

            var topComments = _.filter(comments, function (comment) {
                return comment.likesCounter > 0;
            }); //get all comments with likes,

            topComments = _.sortBy(topComments, function (comment) {
                // sort comments by likes descending
                return -comment.likesCounter;
            });

            if (topComments.length > 1) //display the first 5 comments if we have at least two 2 top comments
                return topComments.splice(0, 5);else return comments;
        },
        topCommentsAreDisplayed: function topCommentsAreDisplayed() {
            return this.state.topComments.length == this.state.comments.length;
        },
        commentsLoadedFromServer: function commentsLoadedFromServer() {
            return this.state.allComments.length > 0;
        },
        getCommentsFromServer: function getCommentsFromServer() {
            var instance = this;

            var promise = $.ajax({
                method: "GET",
                url: "/comments/retrieve",
                cache: false,
                data: {
                    consultationId: this.props.consultationid,
                    articleId: this.props.articleid,
                    source: this.props.source,
                    discussionthreadid: this.state.discussionthreadid,
                    discussionthreadclientid: this.props.discussionthreadclientid
                },
                beforeSend: function beforeSend() {
                    instance.state.busy = true;
                    instance.setState(instance.state);
                },
                success: function success(data) {
                    instance.state.allComments = data;
                    instance.state.topComments = instance.findTopComments(data);
                    instance.state.comments = instance.state.topComments;
                    instance.state.busy = false;
                    instance.state.display = true;

                    instance.setState(instance.state);
                },
                error: function error(x, z, y) {
                    alert(x);
                }
            });

            return promise;
        },
        loadAll: function loadAll() {
            this.setState({ comments: this.state.allComments });
        },
        saveComment: function saveComment(url, data) {
            var instance = this;

            var postedData = {
                consultationId: this.props.consultationid,
                articleId: this.props.articleid,
                discussionThreadId: instance.state.discussionthreadid,
                discussionthreadclientid: this.props.discussionthreadclientid, //the id generated by javascript
                discussionthreadtypeid: data.discussionroomtypeid,
                discussionThreadText: this.props.discussionThreadText, //contains the whole discussion thread text
                fullName: this.props.fullName,
                dateAdded: new Date(),
                userAnnotatedText: data.userAnnotatedText,
                body: data.body,
                annotationTagTopics: data.annotationTagTopics,
                annotationTagProblems: data.annotationTagProblems,
                emotionId: data.emotionId
            };

            //todo: cancel any previous events
            $.ajax({
                method: "POST",
                url: url,
                data: JSON.stringify(postedData),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                beforeSend: function beforeSend() {
                    instance.state.display = true;
                    instance.state.busy = true;
                    instance.setState(instance.state);
                },
                success: function success(comment) {
                    instance.state.discussionthreadid = comment.discussionThread.id; //set discussion thread to state
                    instance.state.totalCommentsCount = instance.state.totalCommentsCount + 1;

                    if (instance.commentsLoadedFromServer()) {
                        instance.state.allComments.unshift(comment);
                        //if we have comments loaded, and all are displayed (not just the top comments) also display the new one
                        if (!instance.topCommentsAreDisplayed()) instance.state.comments.unshift(comment);
                    }
                },
                complete: function complete() {

                    if (instance.commentsLoadedFromServer()) {
                        instance.state.busy = false;
                        instance.setState(instance.state);
                    } else {
                        instance.getCommentsFromServer.call(instance);
                    }
                }
            });
        },
        updateComment: function updateComment(url, data) {
            var instance = this;
            var postedData = {
                commentId: data.commentId,
                consultationId: this.props.consultationid,
                articleId: this.props.articleid,
                fullName: this.props.fullName,
                dateAdded: new Date(),
                userAnnotatedText: data.userAnnotatedText,
                body: data.body,
                annotationTagTopics: data.annotationTagTopics,
                annotationTagProblems: data.annotationTagProblems,
                emotionId: data.emotionId,
                revision: data.revision
            };

            //todo: cancel any previous events
            $.ajax({
                method: "POST",
                url: url,
                data: JSON.stringify(postedData),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                beforeSend: function beforeSend() {
                    instance.state.display = true;
                    instance.state.busy = true;
                    instance.setState(instance.state);
                },
                success: function success(comment) {
                    if (instance.commentsLoadedFromServer()) {
                        //search for the old comment in the comments array
                        for (var commentIndex = 0; commentIndex < instance.state.allComments.length; commentIndex++) {
                            //the new edited comment has the same id with the old version
                            if (instance.state.allComments[commentIndex].id == comment.id) {
                                var oldComment = instance.state.allComments[commentIndex];
                                //store the replies of the old comment to the new one
                                comment.commentReplies = oldComment.commentReplies;
                                //store the discussionThread object of the old comment to the new one
                                comment.discussionThread = oldComment.discussionThread;
                                instance.state.discussionthreadid = oldComment.discussionThread.id; //set discussion thread to state
                                //store the new comment where the old one was
                                instance.state.allComments[commentIndex] = comment;
                            }
                        }
                    }
                },
                complete: function complete() {

                    if (instance.commentsLoadedFromServer()) {
                        instance.state.busy = false;
                        instance.setState(instance.state);
                    } else {
                        instance.getCommentsFromServer.call(instance);
                    }
                }
            });
        },
        setVisibibility: function setVisibibility(display) {
            this.state.display = display;
            this.setState(this.state);
        },
        refreshComments: function refreshComments() {
            var instance = this;
            if (instance.state.totalCommentsCount > instance.state.comments.length) instance.getCommentsFromServer.call(instance);else if (instance.state.display) instance.setVisibibility.call(instance, false);else instance.setVisibibility.call(instance, true);
        },
        toogleBox: function toogleBox() {
            this.state.display = !this.state.display;
            this.setState(this.state);
        },
        shouldDisplayLoadMoreOption: function shouldDisplayLoadMoreOption() {
            return this.state.totalCommentsCount > this.state.comments.length;
        },
        render: function render() {

            if (this.state.busy) {
                return React.createElement(
                    "div",
                    null,
                    React.createElement(TotalCommentsLink, { onClick: this.refreshComments, count: this.state.totalCommentsCount }),
                    React.createElement(scify.ReactLoader, { display: this.state.busy })
                );
            }
            var topClasses = classNames({ hide: this.state.totalCommentsCount == 0 });
            var commendBoxclasses = classNames("commentBox", { hide: !this.state.display });
            var loadAllClasses = classNames("load-all", { hide: !this.shouldDisplayLoadMoreOption() });
            var consultationId = this.props.consultationId;
            return React.createElement(
                "div",
                { className: topClasses },
                React.createElement(TotalCommentsLink, { onClick: this.refreshComments,
                    count: this.state.totalCommentsCount,
                    source: this.props.source,
                    isdiscussionForTheWholeArticle: this.props.isdiscussionForTheWholeArticle,
                    messages: this.state.messages }),
                React.createElement(
                    "div",
                    { className: commendBoxclasses },
                    React.createElement(
                        "div",
                        { className: loadAllClasses },
                        "βλέπετε τα ",
                        this.state.comments.length,
                        " πιο δημοφιλη σχόλια ",
                        React.createElement(
                            "a",
                            { onClick: this.loadAll },
                            "κλικ εδώ για να τα δείτε όλα"
                        )
                    ),
                    React.createElement(scify.CommentList, {
                        consultationEndDate: this.props.consultationEndDate,
                        annotationId: this.props.annotationId,
                        consultationId: this.props.consultationId,
                        userId: this.props.userId,
                        data: this.state.comments,
                        parent: this.props.parent,
                        userDefined: this.props.userDefined,
                        imagesPath: this.props.imagesPath,
                        scrollToComment: this.props.scrollToComment,
                        appState: this.props.appState,
                        annId: this.props.annId,
                        shouldDisplayCommenterName: this.props.shouldDisplayCommenterName,
                        shouldDisplayEditIcon: this.props.shouldDisplayEditIcon,
                        shouldDisplayCommentEdited: this.props.shouldDisplayCommentEdited,
                        shouldDisplayShareBtn: this.props.shouldDisplayShareBtn,
                        shouldDisplayCommentBody: this.props.shouldDisplayCommentBody,
                        shouldDisplayEmotion: this.props.shouldDisplayEmotion,
                        shouldDisplayAnnotatedText: this.props.shouldDisplayAnnotatedText,
                        shouldDisplayReplyBox: this.props.shouldDisplayReplyBox,
                        shouldDisplayReplies: this.props.shouldDisplayReplies,
                        optionsEnabled: this.props.optionsEnabled,
                        shouldDisplayTopics: this.props.shouldDisplayTopics,
                        commentClassNames: this.props.commentClassNames,
                        shouldDisplayFinalLawAnnBtn: this.props.shouldDisplayFinalLawAnnBtn,
                        shouldDisplayLikeDislike: this.props.shouldDisplayLikeDislike,
                        shouldDisplayReportAction: this.props.shouldDisplayReportAction })
                )
            );
        }
    });
    var TotalCommentsLink = React.createClass({
        displayName: "TotalCommentsLink",

        render: function render() {

            var label = this.props.messages.commentsLabel;
            if (this.props.count == 1) label = this.props.messages.commentLabel;

            if (this.props.source && this.props.source == "opengov") label += " " + this.props.messages.commentsFromOpengov + " ";

            if (this.props.isdiscussionForTheWholeArticle) label += " " + this.props.messages.commentsForArticle;else label += " " + this.props.messages.commentsForText;

            if (this.props.count > 0) return React.createElement(
                "a",
                { className: "load", onClick: this.props.onClick },
                this.props.count,
                " ",
                label,
                " "
            );else //todo: how can i return an empty element?
                return React.createElement("span", null);
        }
    });

    window.scify.CommentList = React.createClass({
        displayName: "CommentList",

        render: function render() {
            var instance = this;

            var commentNodes = this.props.data.map(function (comment) {
                return React.createElement(
                    "div",
                    { className: instance.props.parent },
                    React.createElement(scify.Comment, { scrollToComment: instance.props.scrollToComment,
                        imagesPath: instance.props.imagesPath,
                        userId: instance.props.userId,
                        userDefined: instance.props.userDefined,
                        parent: instance.props.parent,
                        consultationEndDate: instance.props.consultationEndDate,
                        key: comment.id,
                        data: comment,
                        annotationId: instance.props.annotationId,
                        consultationId: instance.props.consultationId,
                        appState: instance.props.appState,
                        annId: instance.props.annId,
                        revision: comment.revision,
                        shouldDisplayCommenterName: instance.props.shouldDisplayCommenterName,
                        shouldDisplayEditIcon: instance.props.shouldDisplayEditIcon,
                        shouldDisplayCommentEdited: instance.props.shouldDisplayCommentEdited,
                        shouldDisplayShareBtn: instance.props.shouldDisplayShareBtn,
                        shouldDisplayCommentBody: instance.props.shouldDisplayCommentBody,
                        shouldDisplayEmotion: instance.props.shouldDisplayEmotion,
                        shouldDisplayAnnotatedText: instance.props.shouldDisplayAnnotatedText,
                        shouldDisplayReplyBox: instance.props.shouldDisplayReplyBox,
                        shouldDisplayReplies: instance.props.shouldDisplayReplies,
                        optionsEnabled: instance.props.optionsEnabled,
                        shouldDisplayTopics: instance.props.shouldDisplayTopics,
                        commentClassNames: instance.props.commentClassNames,
                        shouldDisplayFinalLawAnnBtn: instance.props.shouldDisplayFinalLawAnnBtn,
                        shouldDisplayLikeDislike: instance.props.shouldDisplayLikeDislike,
                        shouldDisplayReportAction: instance.props.shouldDisplayReportAction })
                );
            });

            return React.createElement(
                "div",
                { className: "commentList" },
                commentNodes
            );
        }
    });
    window.scify.Comment = React.createClass({
        displayName: "Comment",

        getInitialState: function getInitialState() {
            function sortByKey(array, key) {
                return array.sort(function (a, b) {
                    var x = a[key];var y = b[key];
                    return x > y ? -1 : x < y ? 1 : 0;
                });
            }
            if (this.props.data.commentReplies != undefined) if (this.props.data.commentReplies.length > 1) sortByKey(this.props.data.commentReplies, "dateAdded");
            return {
                likeCounter: this.props.data.likesCounter,
                dislikeCounter: this.props.data.dislikesCounter,
                liked: this.props.data.loggedInUserRating, //if not null it means has liked/disliked this comment
                comment: this.props.data,
                displayReplyBox: false,
                displayReportModal: false
            };
        },
        componentDidMount: function componentDidMount() {
            var instance = this;
            $(React.findDOMNode(this)).find("[data-toggle=\"tooltip\"]").tooltip();
            if (this.props.scrollToComment != undefined && this.getHashValue("commentid") == this.props.data.id) {
                this.props.scrollToComment();
            }

            $("#shareComment-" + instance.props.data.id).click(function () {
                var commentId = $(this).attr("id").split("-")[1];
                var annotationId = instance.props.annotationId;
                //if annotationId is undefined, we are in reporter page, so we cannot get the annId from the DOM.
                //we need to get it from the comment object
                if (annotationId == undefined) {
                    annotationId = instance.props.data.discussionThread.text.split("-")[1];
                }
                var longUrl = "";
                $("#shareComment-" + commentId).prev().toggleClass("shareArticleHiddenComment");
                if (instance.props.appState == "development") {
                    longUrl = "http://localhost:9000/consultation/";
                } else {
                    longUrl = "http://democracit.org/consultation/";
                }
                longUrl += instance.props.consultationId + "#commentid=" + commentId + "&articleid=" + instance.props.data.articleId + "&annid=" + annotationId;
                //show the extra div
                if ($("#shareComment-" + commentId).prev().find(".shareUrl").length == 0) $("#shareComment-" + commentId).prev().append("<div class=\"shareUrl\"><a href=\"" + longUrl + "\">" + longUrl + "</a></div>");
            });
        },
        getHashValue: function getHashValue(key) {
            var matches = location.hash.match(new RegExp(key + "=([^&]*)"));
            return matches ? matches[1] : null;
        },
        handleReply: function handleReply() {
            this.state.displayReplyBox = !this.state.displayReplyBox;
            this.setState(this.state);
        },
        handleSavedComment: function handleSavedComment(comment) {
            //add the new comment to the list of replies
            this.state.comment.commentReplies.unshift(comment);
            this.setState(this.state);
        },
        handleEditComment: function handleEditComment() {
            var commentToBeEdited = this.props.data;
            commentToBeEdited.annId = "ann-" + this.props.annId;
            //throw custom event on the body html passing the comment that will be edited. The comment should have its id populated
            $("body").trigger("editcomment", commentToBeEdited);
        },
        render: function render() {
            //hide lock icon for open gov consultations, and for comments that we posted before the end of the consultation date
            var iconsClasses = classNames("icons", {
                hide: this.props.data.source.commentSource == 2 || this.props.data.dateAdded < this.props.consultationEndDate
            });
            var avatarDiv = React.createElement(
                "div",
                { className: "avatar" },
                React.createElement("img", { src: this.props.data.avatarUrl ? this.props.data.avatarUrl : "/assets/images/profile_default.jpg" })
            );
            var commentClassNames = this.props.commentClassNames;
            return React.createElement(
                "div",
                { className: commentClassNames, id: this.props.data.id },
                avatarDiv,
                React.createElement(
                    "div",
                    { className: "body" },
                    this.renderCommenterName(this.props.shouldDisplayCommenterName),
                    this.renderEditIcon(this.props.shouldDisplayEditIcon),
                    this.renderCommentEdited(this.props.shouldDisplayCommentEdited),
                    React.createElement(
                        "div",
                        { className: "optionsRight" },
                        this.renderReportAction(this.props.shouldDisplayReportAction),
                        this.renderShareBtn(this.props.shouldDisplayShareBtn)
                    ),
                    this.renderCommentBody(this.props.shouldDisplayCommentBody),
                    this.renderEmotion(this.props.shouldDisplayEmotion),
                    this.renderAnnotatedText(this.props.shouldDisplayAnnotatedText),
                    this.renderTopicsHtml(this.props.shouldDisplayTopics)
                ),
                this.renderOptions(this.props.optionsEnabled),
                React.createElement(
                    "div",
                    { className: iconsClasses },
                    React.createElement(
                        "a",
                        { "data-toggle": "tooltip", "data-original-title": "Το σχόλιο εισήχθει μετά τη λήξη της διαβούλευσης" },
                        React.createElement("img", { src: "/assets/images/closed.gif" })
                    )
                ),
                this.renderReplyBox(this.props.shouldDisplayReplyBox),
                this.renderReplies(this.props.shouldDisplayReplies)
            );
        },
        renderTopicsHtml: function renderTopicsHtml(shouldDisplayTopics) {
            if (shouldDisplayTopics) {
                var taggedProblems = this.props.data.annotationTagProblems.map(function (tag) {
                    if (tag != undefined) {
                        return React.createElement(
                            "span",
                            { className: "tag pr" },
                            React.createElement(
                                "span",
                                null,
                                tag.description
                            )
                        );
                    }
                });
                var taggedTopics = this.props.data.annotationTagTopics.map(function (tag) {
                    if (tag != undefined) {
                        return React.createElement(
                            "span",
                            { className: "tag topic" },
                            React.createElement(
                                "span",
                                null,
                                "#" + tag.description
                            )
                        );
                    }
                });
                var taggedProblemsContainer = this.props.data.annotationTagProblems.length > 0 ? React.createElement(
                    "span",
                    null,
                    "Προβλήματα: ",
                    taggedProblems,
                    " "
                ) : "";
                var taggedTopicsContainer = this.props.data.annotationTagTopics.length > 0 ? React.createElement(
                    "span",
                    null,
                    "Κατηγορία: ",
                    taggedTopics,
                    " "
                ) : "";
                if (taggedProblems.length > 0 || taggedTopics.length > 0) var topicsHtml = React.createElement(
                    "div",
                    { className: "tags htmlText" },
                    React.createElement("i", { className: "fa fa-thumb-tack" }),
                    React.createElement(
                        "span",
                        {
                            className: "partName" },
                        "Θέματα: "
                    ),
                    taggedTopicsContainer,
                    " ",
                    taggedProblemsContainer
                );
                return topicsHtml;
            }
        },
        renderShareBtn: function renderShareBtn(shouldDisplayShareBtn) {
            var commentSource = this.props.data.source;
            //we only present the share button to the comments from DemocracIT (comment source ID is 1)
            //we do not present the share button in the userCommentStats tab in reporter page
            if (commentSource != undefined && shouldDisplayShareBtn) {
                if (commentSource.commentSource == 1) {
                    var commentIdForShare = this.props.data.id;
                    var shareBtn = React.createElement(
                        "div",
                        { className: "shareLink" },
                        React.createElement(
                            "span",
                            { className: "shareSpanComment shareArticleHiddenComment" },
                            "Κάντε αντιγραφή τον παρακάτω σύνδεσμο:"
                        ),
                        React.createElement(
                            "span",
                            { className: "shareBtnComment", title: "Σύνδεσμος για αυτό το σχόλιο", id: "shareComment-" + commentIdForShare },
                            React.createElement("i", { className: "fa fa-link" })
                        )
                    );
                    return shareBtn;
                }
            }
        },
        renderCommentEdited: function renderCommentEdited(shouldDisplayCommentEdited) {
            if (shouldDisplayCommentEdited) {
                if (this.props.data.revision > 1) {
                    var commentEdited = React.createElement(
                        "span",
                        { className: "editedComment" },
                        "Ο χρήστης έχει τροποποιήσει αυτό το σχόλιο"
                    );
                    return commentEdited;
                }
            }
        },
        renderEditIcon: function renderEditIcon(shouldDisplayEditIcon) {
            if (shouldDisplayEditIcon) {
                var userId = this.props.userId;
                var commenterId = this.props.data.userId;
                if (userId == commenterId && userId != undefined) {
                    var editIcon = React.createElement(
                        "span",
                        { className: "editIcon", title: "Τροποποιήστε το σχόλιο σας", onClick: this.handleEditComment },
                        React.createElement("i", { className: "fa fa-pencil-square-o" })
                    );
                    return editIcon;
                }
            }
        },
        renderCommenterName: function renderCommenterName(shouldDisplayCommenterName) {
            if (shouldDisplayCommenterName) {
                if (this.props.data.profileUrl) var commenterName = React.createElement(
                    "span",
                    { className: "commentAuthor" },
                    React.createElement(
                        "a",
                        { target: "_blank",
                            href: this.props.data.profileUrl },
                        this.props.data.fullName
                    )
                );else var commenterName = React.createElement(
                    "span",
                    { className: "commentAuthor" },
                    this.props.data.fullName
                );
                return commenterName;
            }
        },
        renderAvatar: function renderAvatar(shouldDisplayAvatar) {
            if (shouldDisplayAvatar) {
                var avatarDiv = React.createElement(
                    "div",
                    { className: "avatar" },
                    React.createElement("img", {
                        src: this.props.data.avatarUrl ? this.props.data.avatarUrl : "/assets/images/profile_default.jpg" })
                );
                return avatarDiv;
            }
        },
        renderCommentBody: function renderCommentBody(shouldDisplayCommentBody) {
            if (shouldDisplayCommentBody) {
                var commentBody = React.createElement(
                    "div",
                    { className: "htmlText" },
                    React.createElement("i", { className: "fa fa-comment-o" }),
                    React.createElement(
                        "span",
                        { className: "partName" },
                        "Σχόλιο: "
                    ),
                    React.createElement("span", { dangerouslySetInnerHTML: { __html: this.props.data.body } })
                );
                return commentBody;
            }
        },
        renderAnnotatedText: function renderAnnotatedText(shouldDisplayAnnotatedText) {
            if (shouldDisplayAnnotatedText) {
                if (this.props.data.userAnnotatedText != null) {
                    if (this.props.data.userAnnotatedText) if (this.props.data.discussionThread.discussion_thread_type_id == 2) var annotatedText = React.createElement(
                        "div",
                        { className: "htmlText" },
                        React.createElement("i", { className: "fa fa-file-text-o" }),
                        React.createElement(
                            "span",
                            { className: "partName" },
                            "Τμήμα κειμένου: "
                        ),
                        React.createElement("span", { dangerouslySetInnerHTML: { __html: this.props.data.userAnnotatedText } })
                    );else var annotatedText = React.createElement(
                        "div",
                        { className: "htmlText" },
                        React.createElement("i", { className: "fa fa-file-text-o" }),
                        React.createElement(
                            "span",
                            { className: "partName" },
                            "Όνομα άρθρου: "
                        ),
                        React.createElement("span", { dangerouslySetInnerHTML: { __html: this.props.data.userAnnotatedText } })
                    );
                }
                return annotatedText;
            }
        },
        renderEmotion: function renderEmotion(shouldDisplayEmotion) {
            var emotionId = this.props.data.emotionId;
            if (emotionId != undefined && shouldDisplayEmotion) {
                var image = "";
                switch (emotionId) {
                    case 1:
                        image = "/emoticons/emoticon-superhappy.png";
                        break;
                    case 2:
                        image = "/emoticons/emoticon-happy.png";
                        break;
                    case 3:
                        image = "/emoticons/emoticon-worried.png";
                        break;
                    case 4:
                        image = "/emoticons/emoticon-sad.png";
                        break;
                    case 5:
                        image = "/emoticons/emoticon-angry.png";
                        break;
                }
                var imageWithPath = this.props.imagesPath + image;
                var emotion = React.createElement(
                    "div",
                    { className: "userEmotion htmlText" },
                    "Ο χρήστης εκδήλωσε το συναίσθημα: ",
                    React.createElement("img", { src: imageWithPath })
                );
                return emotion;
            }
        },
        renderBody: function renderBody(shouldDisplayBody) {
            if (shouldDisplayBody) {
                return React.createElement(
                    "div",
                    { className: "htmlText" },
                    React.createElement("i", { className: "fa fa-comment-o" }),
                    React.createElement(
                        "span",
                        { className: "partName" },
                        "Σχόλιο: "
                    ),
                    React.createElement("span", { dangerouslySetInnerHTML: { __html: this.props.data.body } })
                );
            }
        },
        renderReplyBox: function renderReplyBox(shouldDisplayReplyBox) {
            if (shouldDisplayReplyBox) {
                return React.createElement(scify.ReplyBox, { onReplySuccess: this.handleSavedComment,
                    discussionthreadclientid: this.props.data.discussionThread.id,
                    commenterId: this.props.data.userId,
                    userId: this.props.userId, parentId: this.props.data.id,
                    articleId: this.props.data.articleId,
                    display: this.state.displayReplyBox,
                    annotationId: this.props.data.discussionThread.text.split(this.props.data.articleId)[1],
                    consultationId: this.props.consultationId });
            }
        },
        renderReplies: function renderReplies(shouldDisplayReplies) {
            if (shouldDisplayReplies && this.props.data.commentReplies != undefined) {
                if (this.props.data.commentReplies.length > 0) return React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        { className: "replyTitle" },
                        "Απαντήσεις σε αυτό το σχόλιο:"
                    ),
                    React.createElement(scify.CommentList, { consultationEndDate: this.props.consultationEndDate,
                        userId: this.props.userId,
                        data: this.props.data.commentReplies,
                        userDefined: this.props.userDefined,
                        updateComments: this.handleSavedComment,
                        annotationId: this.props.annotationId,
                        appState: this.props.appState,
                        consultationId: this.props.consultationId,
                        scrollToComment: this.props.scrollToComment,
                        shouldDisplayCommenterName: true,
                        shouldDisplayEditIcon: false,
                        shouldDisplayCommentEdited: false,
                        shouldDisplayShareBtn: true,
                        shouldDisplayCommentBody: true,
                        shouldDisplayEmotion: false,
                        shouldDisplayAnnotatedText: false,
                        shouldDisplayReplyBox: false,
                        shouldDisplayReplies: false,
                        optionsEnabled: true,
                        shouldDisplayTopics: false,
                        commentClassNames: "comment replyComment",
                        shouldDisplayFinalLawAnnBtn: false })
                );
            }
        },
        renderOptions: function renderOptions(optionsEnabled) {
            if (optionsEnabled) {
                return React.createElement(CommentActionsEnabled, {
                    consultationEndDate: this.props.consultationEndDate,
                    userDefined: this.props.userDefined,
                    handleReply: this.handleReply,
                    source: this.props.data.source.commentSource,
                    id: this.props.data.id,
                    dateAdded: this.props.data.dateAdded,
                    likeCounter: this.props.data.likesCounter,
                    dislikeCounter: this.props.data.dislikesCounter,
                    loggedInUserRating: this.props.data.loggedInUserRating,
                    emotionId: this.props.data.emotionId,
                    imagesPath: this.props.imagesPath,
                    consultationId: this.props.consultationId,
                    comment: this.props.data,
                    imagesPath: this.props.imagesPath,
                    shouldDisplayReplyBox: this.props.shouldDisplayReplyBox,
                    shouldDisplayFinalLawAnnBtn: this.props.shouldDisplayFinalLawAnnBtn });
            }
            return React.createElement(CommentActionsDisabled, { imagesPath: this.props.imagesPath,
                dateAdded: this.props.data.dateAdded,
                likeCounter: this.props.data.likesCounter,
                dislikeCounter: this.props.data.dislikesCounter,
                loggedInUserRating: this.props.data.loggedInUserRating,
                emotionId: this.props.data.emotionId,
                shouldDisplayLikeDislike: this.props.shouldDisplayLikeDislike
            });
        },
        renderReportAction: function renderReportAction(shouldDisplayReportAction) {
            var reportBtn = React.createElement("span", null);
            if (shouldDisplayReportAction) reportBtn = React.createElement(
                "span",
                { className: "reportAction", onClick: this.openReportModal },
                "Αναφορά σχολίου ως υβριστικό"
            );
            return reportBtn;
        },
        openReportModal: function openReportModal() {
            $("body").trigger("report-comment", {
                comment: this.props.data,
                imagesPath: this.props.imagesPath,
                endDate: this.props.consultationEndDate
            });
        }
    });

    var CommentActionsEnabled = React.createClass({
        displayName: "CommentActionsEnabled",

        getInitialState: function getInitialState() {
            return {
                likeCounter: this.props.likeCounter,
                dislikeCounter: this.props.dislikeCounter,
                liked: this.props.comment.loggedInUserRating, //if not null it means has liked/disliked this comment
                source: this.props.source, //source =1 for democracIt, source = 2 for opengov
                handleReply: this.props.handleReply,
                finalLawBusy: true,
                reportCommentBusy: true
            };
        },
        postRateCommentAndRefresh: function postRateCommentAndRefresh() {
            var instance = this;
            //todo: make ajax call and increment decremet the counters.
            //todo: cancel any previous events
            var annId = "0";
            if (instance.props.comment.discussionThread != undefined) {
                annId = instance.props.comment.discussionThread.text.split("-")[1];
            }
            var data = {
                comment_id: instance.props.id, liked: instance.state.liked,
                commenterId: instance.props.comment.userId,
                annId: annId,
                articleId: instance.props.comment.articleId,
                consultationId: instance.props.consultationId
            };
            $.ajax({

                method: "POST",
                url: "/comments/rate",

                data: data,
                beforeSend: function beforeSend() {},
                success: function success(response) {
                    return 1;
                },
                complete: function complete() {
                    if (instance.props.userDefined) instance.setState(instance.state);
                },
                error: function error(err) {
                    console.log(err);
                }
            });
        },
        handleLikeComment: function handleLikeComment() {
            //user pressed the liked button
            //console.log(this.props);
            var oldLikeStatus = this.state.liked;
            var newLikeStatus = true;

            if (oldLikeStatus === true && this.props.userDefined) {
                //if comment was already liked, undo it
                newLikeStatus = null;
                this.state.likeCounter = this.state.likeCounter - 1;
            }
            if (oldLikeStatus === false && this.props.userDefined) //comment was disliked and now it was liked, remove it from counter
                this.state.dislikeCounter = this.state.dislikeCounter - 1;

            if (newLikeStatus === true && this.props.userDefined) this.state.likeCounter = this.state.likeCounter + 1;

            this.state.liked = newLikeStatus;
            this.postRateCommentAndRefresh();
        },
        handleDislikeComment: function handleDislikeComment() {
            //user pressed the dislike button
            var oldLikeStatus = this.state.liked;
            var newLikeStatus = false;
            console.log(this.props.userDefined);
            if (oldLikeStatus === false && this.props.userDefined) {
                //if comment was already disliked, undo it
                newLikeStatus = null;
                this.state.dislikeCounter = this.state.dislikeCounter - 1;
            }
            if (oldLikeStatus === true && this.props.userDefined) //comment was liked and now it was disliked, remove it from counter
                this.state.likeCounter = this.state.likeCounter - 1;

            if (newLikeStatus === false && this.props.userDefined) this.state.dislikeCounter = this.state.dislikeCounter + 1;

            this.state.liked = newLikeStatus;
            this.postRateCommentAndRefresh();
        },
        handleCommentInFinalLaw: function handleCommentInFinalLaw() {

            $("body").trigger("match-comment-with-law", { finalLawBusy: this.state.finalLawBusy,
                finalLawDiv: this.state.finalLawDiv,
                comment: this.props.comment,
                imagesPath: this.props.imagesPath,
                endDate: this.props.consultationEndDate
            });
        },
        render: function render() {

            var instance = this;
            var replyClasses = classNames("reply", { hide: this.state.source == 2 }); //,{hide: this.props.data.source.commentSource ==2}); //hide for opengov
            var agreeClasses = classNames("agree", { active: this.state.liked === true });
            var disagreeClasses = classNames("disagree", { active: this.state.liked === false });
            var date = moment(this.props.dateAdded).format("llll");
            if (this.props.shouldDisplayReplyBox) var replyLink = React.createElement(
                "a",
                { className: replyClasses, onClick: this.state.handleReply },
                "Απάντηση ",
                React.createElement("i", { className: "fa fa-reply" })
            );
            if (this.props.shouldDisplayFinalLawAnnBtn) var commentFinalLawAnnBtn = React.createElement(
                "a",
                { onClick: this.handleCommentInFinalLaw, className: "commentInFinalLaw", type: "button" },
                "Αυτό το σχόλιο ελήψθη υπ' όψη στον τελικό νόμο;"
            );
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "optionsContainer" },
                    React.createElement(
                        "div",
                        { className: "options" },
                        React.createElement(
                            "a",
                            { className: agreeClasses, onClick: this.handleLikeComment },
                            "Συμφωνώ",
                            React.createElement("i", { className: "fa fa-thumbs-o-up" })
                        ),
                        React.createElement(
                            "span",
                            { className: "c" },
                            " (",
                            this.state.likeCounter,
                            ")"
                        ),
                        React.createElement(
                            "a",
                            { className: disagreeClasses, onClick: this.handleDislikeComment },
                            "Διαφωνώ",
                            React.createElement("i", { className: "fa fa-thumbs-o-down" })
                        ),
                        " ",
                        React.createElement(
                            "span",
                            { className: "c" },
                            " (",
                            this.state.dislikeCounter,
                            ")"
                        ),
                        replyLink,
                        commentFinalLawAnnBtn,
                        React.createElement(
                            "span",
                            { className: "date" },
                            date
                        )
                    )
                )
            );
        }
    });
    var CommentActionsDisabled = React.createClass({
        displayName: "CommentActionsDisabled",

        getInitialState: function getInitialState() {
            return {
                likeCounter: this.props.likeCounter,
                dislikeCounter: this.props.dislikeCounter
            };
        },
        render: function render() {
            var agreeClasses = classNames("agree", { active: this.state.liked === true });
            var disagreeClasses = classNames("disagree", { active: this.state.liked === false });
            var date = moment(this.props.dateAdded).format("llll");
            if (this.props.shouldDisplayLikeDislike) {
                var likeDislikeInfo = React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        { className: agreeClasses },
                        "Χρήστες που συμφωνούν",
                        React.createElement("i", { className: "fa fa-thumbs-o-up" })
                    ),
                    React.createElement(
                        "span",
                        { className: "c" },
                        " (",
                        this.state.likeCounter,
                        ")"
                    ),
                    React.createElement(
                        "div",
                        { className: disagreeClasses },
                        " Χρήστες που διαφωνούν",
                        React.createElement("i", { className: "fa fa-thumbs-o-down" })
                    ),
                    React.createElement(
                        "span",
                        { className: "c" },
                        " (",
                        this.state.dislikeCounter,
                        ")"
                    )
                );
            }
            return React.createElement(
                "div",
                { className: "optionsContainerDisabled" },
                React.createElement(
                    "div",
                    { className: "options" },
                    likeDislikeInfo,
                    React.createElement(
                        "span",
                        { className: "date" },
                        date
                    )
                )
            );
        }
    });
})();

//# sourceMappingURL=commentBox-compiled.js.map